# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import grpc_pb2 as grpc__pb2


class UITransferStub(object):
    """todo: map in proto is not ordered. Perhaps switch to 2 repeated fields?
    or alternatively we can provide an order object somewhere
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.buy = channel.unary_unary(
                '/plushie_tycoon.UITransfer/buy',
                request_serializer=grpc__pb2.TransactionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.sell = channel.unary_unary(
                '/plushie_tycoon.UITransfer/sell',
                request_serializer=grpc__pb2.TransactionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.make = channel.unary_unary(
                '/plushie_tycoon.UITransfer/make',
                request_serializer=grpc__pb2.TransactionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.next = channel.unary_unary(
                '/plushie_tycoon.UITransfer/next',
                request_serializer=grpc__pb2.SelectionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.save = channel.unary_unary(
                '/plushie_tycoon.UITransfer/save',
                request_serializer=grpc__pb2.SelectionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.load = channel.unary_unary(
                '/plushie_tycoon.UITransfer/load',
                request_serializer=grpc__pb2.SelectionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.back = channel.unary_unary(
                '/plushie_tycoon.UITransfer/back',
                request_serializer=grpc__pb2.SelectionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.quit = channel.unary_unary(
                '/plushie_tycoon.UITransfer/quit',
                request_serializer=grpc__pb2.SelectionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.init = channel.unary_unary(
                '/plushie_tycoon.UITransfer/init',
                request_serializer=grpc__pb2.SelectionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )


class UITransferServicer(object):
    """todo: map in proto is not ordered. Perhaps switch to 2 repeated fields?
    or alternatively we can provide an order object somewhere
    """

    def buy(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sell(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def make(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def next(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def back(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def quit(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UITransferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'buy': grpc.unary_unary_rpc_method_handler(
                    servicer.buy,
                    request_deserializer=grpc__pb2.TransactionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'sell': grpc.unary_unary_rpc_method_handler(
                    servicer.sell,
                    request_deserializer=grpc__pb2.TransactionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'make': grpc.unary_unary_rpc_method_handler(
                    servicer.make,
                    request_deserializer=grpc__pb2.TransactionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'next': grpc.unary_unary_rpc_method_handler(
                    servicer.next,
                    request_deserializer=grpc__pb2.SelectionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=grpc__pb2.SelectionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'load': grpc.unary_unary_rpc_method_handler(
                    servicer.load,
                    request_deserializer=grpc__pb2.SelectionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'back': grpc.unary_unary_rpc_method_handler(
                    servicer.back,
                    request_deserializer=grpc__pb2.SelectionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'quit': grpc.unary_unary_rpc_method_handler(
                    servicer.quit,
                    request_deserializer=grpc__pb2.SelectionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=grpc__pb2.SelectionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plushie_tycoon.UITransfer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UITransfer(object):
    """todo: map in proto is not ordered. Perhaps switch to 2 repeated fields?
    or alternatively we can provide an order object somewhere
    """

    @staticmethod
    def buy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/buy',
            grpc__pb2.TransactionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/sell',
            grpc__pb2.TransactionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def make(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/make',
            grpc__pb2.TransactionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def next(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/next',
            grpc__pb2.SelectionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/save',
            grpc__pb2.SelectionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/load',
            grpc__pb2.SelectionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def back(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/back',
            grpc__pb2.SelectionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/quit',
            grpc__pb2.SelectionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.UITransfer/init',
            grpc__pb2.SelectionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
