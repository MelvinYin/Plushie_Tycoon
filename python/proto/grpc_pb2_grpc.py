# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import grpc_pb2 as grpc__pb2


class ClientPageStub(object):
    """todo: map in proto is not ordered. Perhaps switch to 2 repeated fields?
    or alternatively we can provide an order object somewhere
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/plushie_tycoon.ClientPage/ping',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.NullObject.FromString,
                )
        self.buy = channel.unary_unary(
                '/plushie_tycoon.ClientPage/buy',
                request_serializer=grpc__pb2.TransactionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.sell = channel.unary_unary(
                '/plushie_tycoon.ClientPage/sell',
                request_serializer=grpc__pb2.TransactionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.make = channel.unary_unary(
                '/plushie_tycoon.ClientPage/make',
                request_serializer=grpc__pb2.TransactionObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.next = channel.unary_unary(
                '/plushie_tycoon.ClientPage/next',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.save = channel.unary_unary(
                '/plushie_tycoon.ClientPage/save',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.load = channel.unary_unary(
                '/plushie_tycoon.ClientPage/load',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.back = channel.unary_unary(
                '/plushie_tycoon.ClientPage/back',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.quit = channel.unary_unary(
                '/plushie_tycoon.ClientPage/quit',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.init = channel.unary_unary(
                '/plushie_tycoon.ClientPage/init',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.update = channel.unary_unary(
                '/plushie_tycoon.ClientPage/update',
                request_serializer=grpc__pb2.IntObject.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )


class ClientPageServicer(object):
    """todo: map in proto is not ordered. Perhaps switch to 2 repeated fields?
    or alternatively we can provide an order object somewhere
    """

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buy(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sell(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def make(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def next(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def back(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def quit(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientPageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.NullObject.SerializeToString,
            ),
            'buy': grpc.unary_unary_rpc_method_handler(
                    servicer.buy,
                    request_deserializer=grpc__pb2.TransactionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'sell': grpc.unary_unary_rpc_method_handler(
                    servicer.sell,
                    request_deserializer=grpc__pb2.TransactionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'make': grpc.unary_unary_rpc_method_handler(
                    servicer.make,
                    request_deserializer=grpc__pb2.TransactionObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'next': grpc.unary_unary_rpc_method_handler(
                    servicer.next,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'load': grpc.unary_unary_rpc_method_handler(
                    servicer.load,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'back': grpc.unary_unary_rpc_method_handler(
                    servicer.back,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'quit': grpc.unary_unary_rpc_method_handler(
                    servicer.quit,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=grpc__pb2.IntObject.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plushie_tycoon.ClientPage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientPage(object):
    """todo: map in proto is not ordered. Perhaps switch to 2 repeated fields?
    or alternatively we can provide an order object somewhere
    """

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/ping',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.NullObject.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/buy',
            grpc__pb2.TransactionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/sell',
            grpc__pb2.TransactionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def make(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/make',
            grpc__pb2.TransactionObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def next(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/next',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/save',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/load',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def back(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/back',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/quit',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/init',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientPage/update',
            grpc__pb2.IntObject.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class ClientToHostStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/register',
                request_serializer=grpc__pb2.UserID.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.isregistered = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/isregistered',
                request_serializer=grpc__pb2.UserID.SerializeToString,
                response_deserializer=grpc__pb2.ReturnCode.FromString,
                )
        self.send = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/send',
                request_serializer=grpc__pb2.ProposedChanges.SerializeToString,
                response_deserializer=grpc__pb2.ReturnCode.FromString,
                )
        self.query = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/query',
                request_serializer=grpc__pb2.UserID.SerializeToString,
                response_deserializer=grpc__pb2.Snapshot.FromString,
                )
        self.getTime = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/getTime',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.IntObject.FromString,
                )
        self.hasUpdated = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/hasUpdated',
                request_serializer=grpc__pb2.UserID.SerializeToString,
                response_deserializer=grpc__pb2.ReturnCode.FromString,
                )
        self.ping = channel.unary_unary(
                '/plushie_tycoon.ClientToHost/ping',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.NullObject.FromString,
                )


class ClientToHostServicer(object):
    """Missing associated documentation comment in .proto file"""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isregistered(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTime(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasUpdated(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientToHostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=grpc__pb2.UserID.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'isregistered': grpc.unary_unary_rpc_method_handler(
                    servicer.isregistered,
                    request_deserializer=grpc__pb2.UserID.FromString,
                    response_serializer=grpc__pb2.ReturnCode.SerializeToString,
            ),
            'send': grpc.unary_unary_rpc_method_handler(
                    servicer.send,
                    request_deserializer=grpc__pb2.ProposedChanges.FromString,
                    response_serializer=grpc__pb2.ReturnCode.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=grpc__pb2.UserID.FromString,
                    response_serializer=grpc__pb2.Snapshot.SerializeToString,
            ),
            'getTime': grpc.unary_unary_rpc_method_handler(
                    servicer.getTime,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.IntObject.SerializeToString,
            ),
            'hasUpdated': grpc.unary_unary_rpc_method_handler(
                    servicer.hasUpdated,
                    request_deserializer=grpc__pb2.UserID.FromString,
                    response_serializer=grpc__pb2.ReturnCode.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.NullObject.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plushie_tycoon.ClientToHost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientToHost(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/register',
            grpc__pb2.UserID.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isregistered(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/isregistered',
            grpc__pb2.UserID.SerializeToString,
            grpc__pb2.ReturnCode.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/send',
            grpc__pb2.ProposedChanges.SerializeToString,
            grpc__pb2.ReturnCode.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/query',
            grpc__pb2.UserID.SerializeToString,
            grpc__pb2.Snapshot.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/getTime',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.IntObject.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hasUpdated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/hasUpdated',
            grpc__pb2.UserID.SerializeToString,
            grpc__pb2.ReturnCode.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.ClientToHost/ping',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.NullObject.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminPageStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCall = channel.unary_stream(
                '/plushie_tycoon.AdminPage/getCall',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.ProposedChanges.FromString,
                )
        self.nextTurn = channel.unary_unary(
                '/plushie_tycoon.AdminPage/nextTurn',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.ReturnCode.FromString,
                )
        self.ping = channel.unary_unary(
                '/plushie_tycoon.AdminPage/ping',
                request_serializer=grpc__pb2.NullObject.SerializeToString,
                response_deserializer=grpc__pb2.NullObject.FromString,
                )


class AdminPageServicer(object):
    """Missing associated documentation comment in .proto file"""

    def getCall(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nextTurn(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminPageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCall': grpc.unary_stream_rpc_method_handler(
                    servicer.getCall,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.ProposedChanges.SerializeToString,
            ),
            'nextTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.nextTurn,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.ReturnCode.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=grpc__pb2.NullObject.FromString,
                    response_serializer=grpc__pb2.NullObject.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plushie_tycoon.AdminPage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminPage(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def getCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/plushie_tycoon.AdminPage/getCall',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.ProposedChanges.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def nextTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.AdminPage/nextTurn',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.ReturnCode.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/plushie_tycoon.AdminPage/ping',
            grpc__pb2.NullObject.SerializeToString,
            grpc__pb2.NullObject.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
